service: ${self:custom.appName}-rest-api

provider:
  name: aws
  region: ${file(../../common/infra/provider-settings.yml):region}
  runtime: ${file(../../common/infra/provider-settings.yml):runtime}
  stage: ${file(../../common/infra/provider-settings.yml):stage}
  logRetentionInDays: ${file(../../common/infra/provider-settings.yml):logRetentionInDays}
  memorySize: 128
  timeout: 6
  logs:
    httpApi: true
  httpApi:
    authorizers:
      cognitoJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${cf:${self:custom.infraStack}.UserPoolId}
        audience:
          - ${cf:${self:custom.infraStack}.StaffUserPoolClientId}
  stackTags: # Stack-wide tags applied to all CF resourses that supports tags
    PROJECT: ${file(../../common/infra/provider-settings.yml):appName}
    SERVICE: ${self:service}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, self:custom.logLevel.default}
    API_GW_DOMAIN: !Ref HttpApi
    COGNITO_USER_POOL_ID: ${cf:${self:custom.infraStack}.UserPoolId}
    COGNITO_USER_POOL_CLIENT_ID_STAFF: ${cf:${self:custom.infraStack}.StaffUserPoolClientId}
    COGNITO_USER_POOL_CLIENT_ID_CUSTOMER: TODO
    DDB_TABLE_USERS: ${cf:${self:custom.infraStack}.DDBTableUsers}
    DDB_TABLE_RESTAURANTS: ${cf:${self:custom.infraStack}.DDBTableRestaurants}
    DDB_TABLE_SEATINGS: ${cf:${self:custom.infraStack}.DDBTableSeatings}
    EVENTBRIDGE_SERVICE_BUS_NAME: ${cf:${self:custom.infraStack}.ServiceBus}

custom:
  appName: ${file(../../common/infra/provider-settings.yml):appName}
  infraStack: ${self:custom.appName}-infra-${self:provider.stage}
  awsAccountId: ${cf:${self:custom.infraStack}.AWSAccountId}
  logLevel:
    prod: WARN
    default: DEBUG
  webpack:
    includeModules: false

package:
  individually: true

functions:
  # =================================================================
  # API Gateway handlers
  # =================================================================
  # === /test
  httpTestGet:
    handler: src/handlers/http/get-test.handler
    events:
      - httpApi:
          path: /test
          method: GET

  # === /me
  httpMeGet:
    handler: src/handlers/http/me/get.handler
    events:
      - httpApi:
          path: /me
          method: GET
          authorizer: cognitoJwtAuthorizer

  # === /restaurants
  httpRestaurantsGet:
    handler: src/handlers/http/restaurants/get.handler
    events:
      - httpApi:
          path: /restaurants/{id}
          method: GET
          authorizer: cognitoJwtAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableRestaurants}*

  httpRestaurantsListByRegion:
    handler: src/handlers/http/restaurants/list-by-region.handler
    events:
      - httpApi:
          path: /restaurants/region/{region}
          method: GET
          authorizer: cognitoJwtAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableRestaurants}*

  httpRestaurantsCreate:
    handler: src/handlers/http/restaurants/create.handler
    events:
      - httpApi:
          path: /restaurants
          method: POST
          authorizer: cognitoJwtAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableRestaurants}*
      - Effect: Allow
        Action:
          - cognito-idp:AdminUpdateUserAttributes
        Resource:
          - arn:aws:cognito-idp:${self:provider.region}:${self:custom.awsAccountId}:userpool/${cf:${self:custom.infraStack}.UserPoolId}

  httpRestaurantsUpdateVisibility:
    handler: src/handlers/http/restaurants/update-visibility.handler
    events:
      - httpApi:
          path: /restaurants/{id}/visibility
          method: PATCH
          authorizer: cognitoJwtAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableRestaurants}*

  # === /restaurants/{id}/seatings
  httpSeatingsCreate:
    handler: src/handlers/http/seatings/create.handler
    events:
      - httpApi:
          path: /restaurants/{id}/seatings
          method: POST
          authorizer: cognitoJwtAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableSeatings}*

  # =================================================================
  # EventBridge handlers
  # =================================================================
  ebProcessNewUser:
    handler: src/handlers/eventbridge/process-new-user.handler
    events:
      - eventBridge:
          eventBus: ${cf:${self:custom.infraStack}.ServiceBusArn}
          pattern:
            source:
              - infra
            detail-type:
              - USER_CREATED
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId}:table/${cf:${self:custom.infraStack}.DDBTableUsers}*

  # =================================================================
  # DynamoDB stream handlers
  # =================================================================
  ddbProcessNewSeating:
    handler: src/handlers/dynamodb/process-new-seating.handler
    events:
      - stream:
          type: dynamodb
          arn: ${cf:${self:custom.infraStack}.DDBTableSeatingsStreamArn}
          bisectBatchOnFunctionError: true # split batch in 2 if function returns error
          maximumRetryAttempts: 3
          batchSize: 10 # Upper limit of EventBridge.PutEvents.Entries
          destinations:
            # Capture failed messages to DLQ
            onFailure: ${cf:${self:custom.infraStack}.DDBSeatingsStreamDLQArn}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - events:PutEvents
        Resource:
          - ${cf:${self:custom.infraStack}.ServiceBusArn}
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - ${cf:${self:custom.infraStack}.DDBSeatingsStreamDLQArn}

plugins:
  - serverless-webpack
  - serverless-export-env
  - serverless-iam-roles-per-function
