service: ${self:custom.appName}-rest-api

provider:
  name: aws
  region: ${file(../../common/infra/provider-settings.yml):region}
  runtime: ${file(../../common/infra/provider-settings.yml):runtime}
  stage: ${file(../../common/infra/provider-settings.yml):stage}
  logRetentionInDays: ${file(../../common/infra/provider-settings.yml):logRetentionInDays}
  memorySize: 128
  timeout: 6
  logs:
    httpApi: true
  httpApi:
    authorizers:
      cognitoJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${cf:${self:custom.infraStack}.UserPoolId}
        audience:
          - ${cf:${self:custom.infraStack}.StaffUserPoolClientId}
  stackTags: # Stack-wide tags applied to all CF resourses that supports tags
    PROJECT: ${file(../../common/infra/provider-settings.yml):appName}
    SERVICE: ${self:service}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, self:custom.logLevel.default}
    API_GW_DOMAIN: !Ref HttpApi
    COGNITO_USER_POOL_ID: ${cf:${self:custom.infraStack}.UserPoolId}
    COGNITO_USER_POOL_CLIENT_ID_STAFF: ${cf:${self:custom.infraStack}.StaffUserPoolClientId}
    COGNITO_USER_POOL_CLIENT_ID_CUSTOMER: TODO

custom:
  appName: ${file(../../common/infra/provider-settings.yml):appName}
  infraStack: ${self:custom.appName}-infra-${self:provider.stage}
  awsAccountId: ${cf:${self:custom.infraStack}.AWSAccountId}
  logLevel:
    prod: WARN
    default: DEBUG
  webpack:
    includeModules: false

package:
  individually: true

functions:
  # =================================================================
  # API Gateway handlers
  # =================================================================
  # === /test
  httpTestGet:
    handler: src/handlers/http/get-test.handler
    events:
      - httpApi:
          path: /test
          method: GET

  # === /me
  httpMeGet:
    handler: src/handlers/http/me/get.handler
    events:
      - httpApi:
          path: /me
          method: GET
          authorizer: cognitoJwtAuthorizer

plugins:
  - serverless-webpack
  - serverless-export-env
  - serverless-iam-roles-per-function
