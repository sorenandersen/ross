Resources:
  CognitoUserPoolRossUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:custom.appName}-users-${self:provider.stage}
      UsernameConfiguration:
        CaseSensitive: False
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolTags:
        PROJECT: ${file(../../common/infra/provider-settings.yml):appName}
        SERVICE: ${self:service}
      Schema:
        - AttributeDataType: String
          Name: restaurantId
          Required: false
          Mutable: true
        - AttributeDataType: String
          Name: restaurantRole
          Required: false
          Mutable: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  StaffUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    #DeletionPolicy: Retain
    Properties:
      UserPoolId: !Ref CognitoUserPoolRossUserPool
      ClientName: ${self:custom.appName}-staff-client-${self:provider.stage}
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH # Default and recommended authentication flow, using the Secure Remote Password protocol
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED # Vague errors on sign in; can't tell whether the user exsists from the error message, to prevent attackers from guessing user names

Outputs:
  UserPoolId:
    Description: ID of the User Pool
    Value: !Ref CognitoUserPoolRossUserPool
  UserPoolArn:
    Description: ARN of the User Pool
    Value: !GetAtt CognitoUserPoolRossUserPool.Arn
  StaffUserPoolClientId:
    Description: ID of the Staff User Pool Client
    Value: !Ref StaffUserPoolClient
